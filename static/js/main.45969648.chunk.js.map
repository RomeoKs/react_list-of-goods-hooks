{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSort","isReversed","setIsReversed","visibleGoods","goods","sort","g1","g2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","resetCheck","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAA4BC,mBAASH,EAASI,MAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAmBMC,EAlDD,SACLC,EACAL,EACAE,GAEA,IAAME,EAAY,YAAOC,GAqBzB,OAnBIL,GACFI,EAAaE,MAAK,SAACC,EAAIC,GACrB,OAAQR,GACN,KAAKL,EAASc,SACZ,OAAOF,EAAGG,cAAcF,GAE1B,KAAKb,EAASgB,OACZ,OAAOJ,EAAGK,OAASJ,EAAGI,OAExB,QACE,OAAO,MAKXV,GACFE,EAAaS,UAGRT,EAwBcU,CAAkBlB,EAAiBI,EAAUE,GAC5Da,EAAab,GAAcF,IAAaL,EAASI,KAEvD,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,kBAAmB,CAAE,WAAYlB,IAAaL,EAASc,WAEzDU,QAAS,WAvBflB,EAAQN,EAASc,WAkBb,iCAUA,wBACEQ,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYlB,IAAaL,EAASgB,SAEtCQ,QAAS,WA9BflB,EAAQN,EAASgB,SAwBb,4BAWA,wBACEM,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAahB,IAEjBiB,QAAS,WAjDfhB,GAAeD,IA2CX,qBAWCa,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,kBA9CjBhB,GAAc,QACdF,EAAQN,EAASI,OA0CX,sBAUJ,6BACE,6BACGK,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cC3HpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.45969648.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  if (sortType) {\n    visibleGoods.sort((g1, g2) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return g1.localeCompare(g2);\n\n        case SortType.LENGTH:\n          return g1.length - g2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSort] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const reverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const sortByAlphabet = () => {\n    setSort(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSort(SortType.LENGTH);\n  };\n\n  const reset = () => {\n    setIsReversed(false);\n    setSort(SortType.NONE);\n  };\n\n  const visibleGoods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n  const resetCheck = isReversed || sortType !== SortType.NONE;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info ', { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => sortByAlphabet()}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => sortByLength()}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => reverse()}\n        >\n          Reverse\n        </button>\n\n        {resetCheck && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => reset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}